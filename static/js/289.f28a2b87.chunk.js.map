{"version":3,"file":"static/js/289.f28a2b87.chunk.js","mappings":"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","sources":["page/chat/ChatWebSocket.tsx","webpack://my-app/./src/components/Users/User.module.css?05eb"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport s from \"../../components/Users/User.module.css\";\nimport * as yup from \"yup\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    ChatMessageWithID,\n    sendNewChatMessage,\n    startChatMessageListening,\n    stopChatMessageListening\n} from \"../../Redux/Chat-reducer\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {AppStateType} from \"../../Redux/redux-store\";\nimport {ActionsType} from \"../../Redux/Chat-reducer\";\nimport {ChatMessageType} from \"../../api/chat-api\";\n\n\nconst ChatPage: React.FC<{}> = React.memo(props => {\n        return (\n            <div>\n                <Chat/>\n            </div>\n        )\n    }\n)\nconst Chat: React.FC = () => {\n\n    const dispatch = useDispatch<ThunkDispatch<AppStateType, unknown, ActionsType>>()\n    useEffect(() => {\n        dispatch(startChatMessageListening())\n        return () => {\n            dispatch(stopChatMessageListening())\n        }\n    }, [dispatch])\n\n    return (\n        <div>\n            <div style={{backgroundColor: 'lightgrey', padding: '10px'}}>\n                <ChatMessages/>\n            </div>\n            <AddMessageForm/>\n        </div>\n\n    )\n}\n\nconst ChatMessages: React.FC<{}> = () => {\n\n    let ChatMessages = useSelector((state: AppStateType) =>\n        state.chat.chatMessages)\n    const [isAutoScroll,setIsAutoScroll]=useState(false)\nconst scrollHandler=(e:React.UIEvent<HTMLDivElement, UIEvent>)=>{\nconst element=e.currentTarget\n    if (Math.abs((element.scrollHeight-element.scrollTop)-element.clientHeight)<300) {\n        !isAutoScroll && setIsAutoScroll(true)\n    } else {\n        isAutoScroll && setIsAutoScroll(false)\n    }\n}\n    const messageAnchorRef=useRef<HTMLDivElement>(null)\nuseEffect(\n    ()=>{\n        if (isAutoScroll) {\n        messageAnchorRef.current?.scrollIntoView({behavior:\"smooth\"})}\n    },[ChatMessages]\n)\n    return (\n        <div style={{overflowY: \"auto\", height: \"450px\"}} onScroll={scrollHandler}>\n            {ChatMessages.map((message: ChatMessageWithID) =>\n                <ChatMessage key={message.id} message={message}/>\n            )}\n            <div ref={messageAnchorRef}></div>\n        </div>\n\n    )\n}\nconst ChatMessage: React.FC<{ message: ChatMessageType }> = React.memo(({message})=> {\n\n    return (\n        <div>\n            <img src={message.photo} style={{width: '20px', height: '20px'}}/><b>{message.userName}</b>\n            <span style={{paddingLeft: '10px'}}>{new Date().getHours()}</span>:<span>{ new Date().getMinutes()}</span>:\n            <span>{new Date().getSeconds()}</span>\n            <span style={{paddingLeft: '10px'}}>{new Date().getDate()}</span>/<span>{new Date().getMonth()}</span>/\n            <span>{new Date().getFullYear()}</span>\n            <br/>\n            {message.message}\n            <hr/>\n        </div>\n\n    )\n}\n)\n\nconst AddMessageForm: React.FC<{}> = () => {\n\nconst statusWSConnection=useSelector((state:AppStateType)=>state.chat.connectionWSStatus)\n    const dispatch = useDispatch<ThunkDispatch<AppStateType, unknown, ActionsType>>()\n    const schema = yup.object({\n        NewChatMessage: yup.string().max(100).required(),\n    })\n    const {\n        register, handleSubmit,\n        formState: {errors}, reset\n    } = useForm<{ NewChatMessage: string }>({\n        resolver: yupResolver(schema)\n    });\n    const onSubmit = (SubmitFormData: { NewChatMessage: string }) => {\n        if (!!SubmitFormData.NewChatMessage) {\n            dispatch(sendNewChatMessage(SubmitFormData.NewChatMessage))\n        }\n        reset()\n    }\n\n    const checkKeyDown = (e:React.KeyboardEvent<HTMLFormElement>) => {\n        if (e.key === \"Enter\" && e.ctrlKey && statusWSConnection) handleSubmit(onSubmit)()\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}  onKeyDown={(e) => checkKeyDown(e)}>\n            <textarea {...register(\"NewChatMessage\")} placeholder={\"New Chat Message\"} />\n            <div><input type=\"submit\" disabled={!statusWSConnection} value=\"Send Chat Message\"/></div>\n            <p className={s.error}>{errors.NewChatMessage?.message}</p>\n        </form>\n    )\n}\n\nexport default ChatPage\n\n","// extracted by mini-css-extract-plugin\nexport default {\"userFoto\":\"User_userFoto__houx+\",\"error\":\"User_error__SAXv6\"};"],"names":["ChatPage","React","props","_jsx","children","Chat","dispatch","useDispatch","useEffect","startChatMessageListening","stopChatMessageListening","_jsxs","style","backgroundColor","padding","ChatMessages","AddMessageForm","useSelector","state","chat","chatMessages","_useState","useState","_useState2","_slicedToArray","isAutoScroll","setIsAutoScroll","messageAnchorRef","useRef","_messageAnchorRef$cur","current","scrollIntoView","behavior","overflowY","height","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","message","ChatMessage","id","ref","_ref","src","photo","width","userName","paddingLeft","Date","getHours","getMinutes","getSeconds","getDate","getMonth","getFullYear","_errors$NewChatMessag","statusWSConnection","connectionWSStatus","schema","yup","NewChatMessage","max","required","_useForm","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","reset","onSubmit","SubmitFormData","sendNewChatMessage","onKeyDown","key","ctrlKey","checkKeyDown","_objectSpread","placeholder","type","disabled","value","className","s","error"],"sourceRoot":""}